// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: shopping.proto

package shopping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShoppingService_AddProduct_FullMethodName      = "/shopping.ShoppingService/AddProduct"
	ShoppingService_GetProduct_FullMethodName      = "/shopping.ShoppingService/GetProduct"
	ShoppingService_UpdateProduct_FullMethodName   = "/shopping.ShoppingService/UpdateProduct"
	ShoppingService_DeleteProduct_FullMethodName   = "/shopping.ShoppingService/DeleteProduct"
	ShoppingService_ListProducts_FullMethodName    = "/shopping.ShoppingService/ListProducts"
	ShoppingService_MarkAsPurchased_FullMethodName = "/shopping.ShoppingService/MarkAsPurchased"
)

// ShoppingServiceClient is the client API for ShoppingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShoppingServiceClient interface {
	AddProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	GetProduct(ctx context.Context, in *ProductNameRequest, opts ...grpc.CallOption) (*Product, error)
	UpdateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProduct(ctx context.Context, in *ProductNameRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	ListProducts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ProductList, error)
	MarkAsPurchased(ctx context.Context, in *ProductNameRequest, opts ...grpc.CallOption) (*ProductResponse, error)
}

type shoppingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShoppingServiceClient(cc grpc.ClientConnInterface) ShoppingServiceClient {
	return &shoppingServiceClient{cc}
}

func (c *shoppingServiceClient) AddProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ShoppingService_AddProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) GetProduct(ctx context.Context, in *ProductNameRequest, opts ...grpc.CallOption) (*Product, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Product)
	err := c.cc.Invoke(ctx, ShoppingService_GetProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) UpdateProduct(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ShoppingService_UpdateProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) DeleteProduct(ctx context.Context, in *ProductNameRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ShoppingService_DeleteProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) ListProducts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ProductList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductList)
	err := c.cc.Invoke(ctx, ShoppingService_ListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingServiceClient) MarkAsPurchased(ctx context.Context, in *ProductNameRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, ShoppingService_MarkAsPurchased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoppingServiceServer is the server API for ShoppingService service.
// All implementations must embed UnimplementedShoppingServiceServer
// for forward compatibility.
type ShoppingServiceServer interface {
	AddProduct(context.Context, *ProductRequest) (*ProductResponse, error)
	GetProduct(context.Context, *ProductNameRequest) (*Product, error)
	UpdateProduct(context.Context, *ProductRequest) (*ProductResponse, error)
	DeleteProduct(context.Context, *ProductNameRequest) (*ProductResponse, error)
	ListProducts(context.Context, *Void) (*ProductList, error)
	MarkAsPurchased(context.Context, *ProductNameRequest) (*ProductResponse, error)
	mustEmbedUnimplementedShoppingServiceServer()
}

// UnimplementedShoppingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShoppingServiceServer struct{}

func (UnimplementedShoppingServiceServer) AddProduct(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedShoppingServiceServer) GetProduct(context.Context, *ProductNameRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedShoppingServiceServer) UpdateProduct(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedShoppingServiceServer) DeleteProduct(context.Context, *ProductNameRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedShoppingServiceServer) ListProducts(context.Context, *Void) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedShoppingServiceServer) MarkAsPurchased(context.Context, *ProductNameRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsPurchased not implemented")
}
func (UnimplementedShoppingServiceServer) mustEmbedUnimplementedShoppingServiceServer() {}
func (UnimplementedShoppingServiceServer) testEmbeddedByValue()                         {}

// UnsafeShoppingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoppingServiceServer will
// result in compilation errors.
type UnsafeShoppingServiceServer interface {
	mustEmbedUnimplementedShoppingServiceServer()
}

func RegisterShoppingServiceServer(s grpc.ServiceRegistrar, srv ShoppingServiceServer) {
	// If the following call pancis, it indicates UnimplementedShoppingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShoppingService_ServiceDesc, srv)
}

func _ShoppingService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).AddProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).GetProduct(ctx, req.(*ProductNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).UpdateProduct(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).DeleteProduct(ctx, req.(*ProductNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).ListProducts(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShoppingService_MarkAsPurchased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoppingServiceServer).MarkAsPurchased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShoppingService_MarkAsPurchased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoppingServiceServer).MarkAsPurchased(ctx, req.(*ProductNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShoppingService_ServiceDesc is the grpc.ServiceDesc for ShoppingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShoppingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopping.ShoppingService",
	HandlerType: (*ShoppingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProduct",
			Handler:    _ShoppingService_AddProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ShoppingService_GetProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ShoppingService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ShoppingService_DeleteProduct_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _ShoppingService_ListProducts_Handler,
		},
		{
			MethodName: "MarkAsPurchased",
			Handler:    _ShoppingService_MarkAsPurchased_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shopping.proto",
}
